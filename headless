#!/usr/bin/env python3
"""
Headless Model Tester - Quick CLI for testing .shy models

Short and sweet command-line tool to test any model without GUI.

Usage:
    headless model.shy                    # Test one model
    headless model1.shy model2.shy        # Test multiple models
    headless model.shy -s 100             # Run 100 steps
    headless model.shy -v                 # Verbose mode
    headless model.shy -q                 # Quiet mode (summary only)
    
Shortcuts:
    headless glycolysis                   # Tests the fresh Glycolysis model
    headless glycolysis-sources           # Tests Glycolysis with sources
    
Examples:
    headless workspace/projects/Flow_Test/models/Glycolysis_fresh_Gluconeogenesis.shy
    headless glycolysis -s 50 -v
"""

import sys
from pathlib import Path

# Add src to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / 'tests' / 'validate' / 'headless'))

# Import the actual test runner
from test_any_model import ModelTester
import argparse


# Shortcuts for common models
SHORTCUTS = {
    'glycolysis': 'workspace/projects/Flow_Test/models/Glycolysis_fresh_Gluconeogenesis.shy',
    'glycolysis-sources': 'workspace/projects/Flow_Test/models/Glycolysis_fresh_WITH_SOURCES.shy',
    'gly': 'workspace/projects/Flow_Test/models/Glycolysis_fresh_Gluconeogenesis.shy',
    'gly-src': 'workspace/projects/Flow_Test/models/Glycolysis_fresh_WITH_SOURCES.shy',
}


def resolve_model_path(model_arg: str) -> str:
    """Resolve model path from argument (may be shortcut or path)."""
    # Check if it's a shortcut
    if model_arg.lower() in SHORTCUTS:
        return SHORTCUTS[model_arg.lower()]
    
    # Otherwise it's a path
    return model_arg


def main():
    parser = argparse.ArgumentParser(
        prog='headless',
        description='Test .shy models without GUI - quick and simple!',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Quick Examples:
  headless glycolysis                    # Test Glycolysis (fresh import)
  headless glycolysis-sources            # Test with source transitions
  headless my_model.shy                  # Test your model
  headless model.shy -s 100 -v           # 100 steps, verbose

Shortcuts:
  glycolysis, gly          → Fresh Glycolysis import
  glycolysis-sources, gly-src → Glycolysis with 5 sources

Output Modes:
  (default)    Shows key steps and summary
  -v, --verbose    Shows every step
  -q, --quiet      Shows only summary
        """
    )
    
    parser.add_argument('models', nargs='+', metavar='MODEL',
                       help='Model file(s) or shortcut(s) to test')
    parser.add_argument('-s', '--steps', type=int, default=20, metavar='N',
                       help='Number of simulation steps (default: 20)')
    parser.add_argument('-v', '--verbose', action='store_true',
                       help='Show all steps (detailed output)')
    parser.add_argument('-q', '--quiet', action='store_true',
                       help='Show only summary (minimal output)')
    
    args = parser.parse_args()
    
    # Validate
    if args.verbose and args.quiet:
        print("Error: Cannot use -v and -q together")
        return 1
    
    # Resolve model paths
    model_paths = [resolve_model_path(m) for m in args.models]
    
    # Show what we're testing
    if not args.quiet:
        print("=" * 70)
        print("HEADLESS MODEL TESTER")
        print("=" * 70)
        print(f"\nTesting: {len(model_paths)} model(s)")
        print(f"Steps: {args.steps}")
        
        # Show shortcuts used
        for original, resolved in zip(args.models, model_paths):
            if original != resolved:
                print(f"  '{original}' → {resolved}")
        print()
    
    # Test each model
    all_passed = True
    for i, model_path in enumerate(model_paths, 1):
        if len(model_paths) > 1 and not args.quiet:
            print(f"\n{'=' * 70}")
            print(f"MODEL {i}/{len(model_paths)}")
            print(f"{'=' * 70}")
        
        tester = ModelTester(
            model_path=model_path,
            steps=args.steps,
            verbose=args.verbose,
            quiet=args.quiet
        )
        
        passed = tester.test_model()
        if not passed:
            all_passed = False
    
    # Multi-model summary
    if len(model_paths) > 1 and not args.quiet:
        print("\n" + "=" * 70)
        print(f"{'✓ ALL PASSED' if all_passed else '✗ SOME FAILED'} - Tested {len(model_paths)} models")
        print("=" * 70)
    
    return 0 if all_passed else 1


if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\nInterrupted by user")
        sys.exit(130)
    except Exception as e:
        print(f"\nError: {e}")
        sys.exit(1)
