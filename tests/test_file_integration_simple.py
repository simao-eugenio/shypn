#!/usr/bin/env python3
"""Simple File Menu Integration Test (no GTK required).

This test verifies the file save/load integration without importing GTK.
"""
import os
import sys
import tempfile

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

def test_method_existence():
    """Test that save/load methods exist in source code."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Check model_canvas_loader.py
    loader_path = os.path.join(script_dir, '..', 'src', 'shypn', 'helpers', 'model_canvas_loader.py')
    
    with open(loader_path, 'r') as f:
        loader_content = f.read()
    
    # Check for save method
    assert 'def save_current_document(self' in loader_content, \
        "ModelCanvasLoader should have save_current_document method"
    assert 'document.save_to_file(' in loader_content, \
        "save_current_document should call document.save_to_file()"
    assert 'Gtk.FileChooserDialog' in loader_content, \
        "Should use file chooser dialog"
    
    # Check for load method
    assert 'def load_document(self' in loader_content, \
        "ModelCanvasLoader should have load_document method"
    assert 'DocumentModel.load_from_file(' in loader_content, \
        "load_document should call DocumentModel.load_from_file()"
    
    print("‚úÖ save_current_document(save_as=False) method exists")
    print("‚úÖ save_current_document() uses FileChooserDialog for file selection")
    print("‚úÖ save_current_document() calls document.save_to_file()")
    print("‚úÖ load_document() method exists")
    print("‚úÖ load_document() uses FileChooserDialog for file selection")
    print("‚úÖ load_document() calls DocumentModel.load_from_file()")

def test_document_model_persistence():
    """Test that DocumentModel can save and load (no GTK needed)."""
    from shypn.data.canvas.document_model import DocumentModel
    from shypn.netobjs import Place, Transition, Arc
    
    # Create a document with some objects
    doc = DocumentModel()
    
    # Add a place
    place1 = Place(x=100, y=100, id=1, name="P1")
    place1.tokens = 3
    doc.add_place(place1)
    
    # Add a transition
    trans1 = Transition(x=200, y=100, id=1, name="T1")
    doc.add_transition(trans1)
    
    # Add an arc
    arc1 = Arc(source=place1, target=trans1, id=1, name="A1")
    arc1.weight = 2
    doc.add_arc(arc1)
    
    # Save to temp file
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        temp_path = f.name
    
    try:
        # Save
        doc.save_to_file(temp_path)
        print(f"‚úÖ Saved document to temp file")
        
        # Verify file exists
        assert os.path.exists(temp_path), "File should exist"
        
        # Load
        loaded_doc = DocumentModel.load_from_file(temp_path)
        print(f"‚úÖ Loaded document from temp file")
        
        # Verify objects
        assert len(loaded_doc.places) == 1, "Should have 1 place"
        assert len(loaded_doc.transitions) == 1, "Should have 1 transition"
        assert len(loaded_doc.arcs) == 1, "Should have 1 arc"
        
        # Verify place properties
        loaded_place = loaded_doc.places[0]
        assert loaded_place.tokens == 3, "Place should have 3 tokens"
        assert loaded_place.x == 100, "Place should be at x=100"
        assert loaded_place.y == 100, "Place should be at y=100"
        
        # Verify arc properties
        loaded_arc = loaded_doc.arcs[0]
        assert loaded_arc.weight == 2, "Arc should have weight 2"
        assert loaded_arc.source == loaded_place, "Arc source should be the loaded place"
        
        print("‚úÖ All object properties preserved correctly")
        print(f"   - Place: {loaded_place.name} at ({loaded_place.x}, {loaded_place.y}) with {loaded_place.tokens} tokens")
        print(f"   - Transition: {loaded_doc.transitions[0].name}")
        print(f"   - Arc: {loaded_arc.name} with weight {loaded_arc.weight}")
        
    finally:
        # Clean up
        if os.path.exists(temp_path):
            os.unlink(temp_path)
            print(f"‚úÖ Cleaned up temp file")

def test_button_integration():
    """Test that buttons are wired up in main application."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    shypn_path = os.path.join(script_dir, '..', 'src', 'shypn.py')
    
    with open(shypn_path, 'r') as f:
        content = f.read()
    
    # Check for save button connection
    assert 'file_save_button' in content, "Should wire up file_save_button"
    assert 'save_current_document' in content, "Should call save_current_document"
    
    # Check for open button connection
    assert 'file_open_button' in content, "Should wire up file_open_button"
    assert 'load_document' in content, "Should call load_document"
    
    # Check for save as button connection
    assert 'file_save_as_button' in content, "Should wire up file_save_as_button"
    assert 'save_as=True' in content, "Should call save with save_as=True"
    
    print("‚úÖ file_save_button ‚Üí save_current_document()")
    print("‚úÖ file_open_button ‚Üí load_document()")
    print("‚úÖ file_save_as_button ‚Üí save_current_document(save_as=True)")

def main():
    """Run all tests."""
    print("=" * 70)
    print("File Menu Integration Tests (Simple - No GTK)")
    print("=" * 70)
    print()
    
    try:
        print("Test 1: File operation methods exist in ModelCanvasLoader")
        print("-" * 70)
        test_method_existence()
        print()
        
        print("Test 2: DocumentModel persistence works")
        print("-" * 70)
        test_document_model_persistence()
        print()
        
        print("Test 3: Buttons are wired up correctly in main app")
        print("-" * 70)
        test_button_integration()
        print()
        
        print("=" * 70)
        print("üéâ ALL TESTS PASSED!")
        print("=" * 70)
        print()
        print("Summary:")
        print("--------")
        print("‚úÖ ModelCanvasLoader has save_current_document() method")
        print("‚úÖ ModelCanvasLoader has load_document() method")
        print("‚úÖ Save uses FileChooserDialog for file selection")
        print("‚úÖ Load uses FileChooserDialog for file selection")
        print("‚úÖ DocumentModel can save to JSON files")
        print("‚úÖ DocumentModel can load from JSON files")
        print("‚úÖ File buttons wired in shypn.py:")
        print("   - file_save_button ‚Üí save_current_document()")
        print("   - file_open_button ‚Üí load_document()")
        print("   - file_save_as_button ‚Üí save_current_document(save_as=True)")
        print("‚úÖ All object properties preserved during save/load")
        print()
        print("File menu integration is complete! ‚ú®")
        print()
        print("User workflow:")
        print("--------------")
        print("1. User creates Petri net objects (places, transitions, arcs)")
        print("2. User clicks [Save] button ‚Üí FileChooserDialog appears")
        print("3. User selects location ‚Üí Document saved as .json file")
        print("4. User clicks [Open] button ‚Üí FileChooserDialog appears")
        print("5. User selects .json file ‚Üí Document loaded in new tab")
        print("6. All objects restored with correct properties!")
        
        return 0
        
    except AssertionError as e:
        print(f"‚ùå Test failed: {e}")
        return 1
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == '__main__':
    sys.exit(main())
